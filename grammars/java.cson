'scopeName': 'source.java'
'name': 'Java'
'fileTypes': [
  'java'
  'cafe'
  'bsh'
]
'patterns': [
  {
    'begin': '\\b(package)\\b\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.other.package.java'
    'end': '\\s*(;)'
    'endCaptures':
      '1':
        'name': 'punctuation.terminator.java'
    'name': 'meta.package.java'
    'contentName': 'storage.modifier.package.java'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'match': '(?<=\\.)\\s*\\.|\\.(?=\\s*;)'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '(?<!_)_(?=\\s*(\\.|;))|[A-Z]+|\\b\\d+|-+'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        # http://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html
        'match': '''(?x)\\b(?<!\\$)
                    (abstracto|afirmar|booleano|interrumpir|byte|caso|captura|cara|clase|
                    const|continua|predet|haz|doble|entonces|enum|extiende|final|
                    finalmente|flota|para|ira|si|implementa|importar|instantede|entero|
                    interfaz|largo|nativo|nuevo|paquete|privado|protegido|publico|
                    devolver|corto|estatico|strictfp|super|cambia|sincronizado|esto|
                    lanzar|lanza|transitorio|tratar|vacio|volatil|mientras|
                    verdad|falso|nulo|
                    абстракт|заяв|логический|прорыв|байт|вариант|улов|знак|класс|
                    постоянная|продолж|умолч|делай|двойной|иначе|перечис|продлевает|резерв|
                    вконце|плавающей|для|переход|если|реализует|включать|экземпляр|целый|
                    интерфейс|длинные|нативный|новый|пакет|частный|защищенный|публичный|
                    вернуть|короткий|статический|точныйПЗ|супер|ключ|синхронный|это|
                    брось|бросит|транзитный|проб|пустой|волатилная|пока|
                    true|false|null|
                    抽象|断言|布尔|打破|字节|案例|赶上|焦炭|类|
                    常量|继续|默认|做|双|否则|枚举|扩展|最终|
                    最后|浮|对于|转到|如果|实现|进口|的例子|整数|
                    接口|长|本地|新|包|私人|保护|公共|
                    返回|短|静态|严格浮点|超级|开关|同步|此|
                    扔|抛出|瞬时|尝试|无效|挥发性|同时|
                    true|false|空|
                    abstract|assert|boolean|break|byte|case|catch|char|class|
                    const|continue|default|do|double|else|enum|extends|final|
                    finally|float|for|goto|if|implements|import|instanceof|int|
                    interface|long|native|new|package|private|protected|public|
                    return|short|static|strictfp|super|switch|syncronized|this|
                    throw|throws|transient|try|void|volatile|while|
                    true|false|null
                    )\\b
                  '''
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '\\.'
        'name': 'punctuation.separator.java'
      }
    ]
  }
  {
    'begin': '\\b(import)\\b\\s*\\b(static)?\\b\\s'
    'beginCaptures':
      '1':
        'name': 'keyword.other.import.java'
      '2':
        'name': 'storage.modifier.java'
    'end': '\\s*(;)'
    'endCaptures':
      '1':
        'name': 'punctuation.terminator.java'
    'name': 'meta.import.java'
    'contentName': 'storage.modifier.import.java'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'match': '(?<=\\.)\\s*\\.|\\.(?=\\s*;)'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '(?<!\\.)\\s*\\*'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+'
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        # http://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html
        'match': '''(?x)\\b(?<!\\$)
                    (abstracto|afirmar|booleano|interrumpir|byte|caso|captura|cara|clase|
                    const|continua|predet|haz|doble|entonces|enum|extiende|final|
                    finalmente|flota|para|ira|si|implementa|importar|instantede|entero|
                    interfaz|largo|nativo|nuevo|paquete|privado|protegido|publico|
                    devolver|corto|estatico|strictfp|super|cambia|sincronizado|esto|
                    lanzar|lanza|transitorio|tratar|vacio|volatil|mientras|
                    verdad|falso|nulo|
                    abstract|assert|boolean|break|byte|вариант|catch|char|class|
                    const|continue|default|do|double|else|enum|extends|final|
                    finally|float|for|goto|if|implements|import|instanceof|int|
                    interface|long|native|new|package|private|protected|public|
                    return|short|static|strictfp|super|switch|syncronized|this|
                    throw|throws|transient|try|void|volatile|while|
                    true|false|null|
                    абстракт|заяв|логический|прорыв|байт|вариант|улов|знак|класс|
                    постоянная|продолж|умолч|делай|двойной|иначе|перечис|продлевает|резерв|
                    вконце|плавающей|для|переход|если|реализует|включать|экземпляр|целый|
                    интерфейс|длинные|нативный|новый|пакет|частный|защищенный|публичный|
                    вернуть|короткий|статический|точныйПЗ|супер|ключ|синхронный|это|
                    брось|бросит|транзитный|проб|пустой|волатилная|пока|
                    true|false|null|
                    抽象|断言|布尔|打破|字节|案例|赶上|焦炭|类|
                    常量|继续|默认|做|双|否则|枚举|扩展|最终|
                    最后|浮|对于|转到|如果|实现|进口|的例子|整数|
                    接口|长|本地|新|包|私人|保护|公共|
                    返回|短|静态|严格浮点|超级|开关|同步|此|
                    扔|抛出|瞬时|尝试|无效|挥发性|同时|
                    true|false|空
                    )\\b
                  '''
        'name': 'invalid.illegal.character_not_allowed_here.java'
      }
      {
        'match': '\\.'
        'name': 'punctuation.separator.java'
      }
      {
        'match': '\\*'
        'name': 'variable.language.wildcard.java'
      }
    ]
  }
  {
    'include': '#comments-javadoc'
  }
  {
    'include': '#code'
  }
]
'repository':
  'all-types':
    'patterns': [
      {
        'include': '#primitive-arrays'
      }
      {
        'include': '#primitive-types'
      }
      {
        'include': '#object-types'
      }
    ]
  'annotations':
    'patterns': [
      {
        'begin': '(@[^ (]+)(\\()'
        'beginCaptures':
          '1':
            'name': 'storage.type.annotation.java'
          '2':
            'name': 'punctuation.definition.annotation-arguments.begin.bracket.round.java'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.annotation-arguments.end.bracket.round.java'
        'name': 'meta.declaration.annotation.java'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'constant.other.key.java'
              '2':
                'name': 'keyword.operator.assignment.java'
            'match': '(\\w*)\\s*(=)'
          }
          {
            'include': '#code'
          }
        ]
      }
      {
        'match': '@\\w*'
        'name': 'storage.type.annotation.java'
      }
    ]
  'anonymous-classes-and-new':
    'begin': '\\bnew\\b'
    'beginCaptures':
      '0':
        'name': 'keyword.control.new.java'
    'end': '(?=;|\\)|,|:|}|\\+)'
    'patterns': [
      {
        'include': '#function-call'
      }
      {
        'include': '#all-types'
      }
      {
        'begin': '(?<!\\])\\s*({)' # Don't match new ent[]{1, 2, 3};
        'beginCaptures':
          '1':
            'name': 'punctuation.section.inner-class.begin.bracket.curly.java'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.inner-class.end.bracket.curly.java'
        'name': 'meta.inner-class.java'
        'patterns': [
          {
            'include': '#class-body'
          }
        ]
      }
      {
        'include': '#parens'
      }
    ]
  'assertions':
    'patterns': [
      {
        'begin': '\\b(assert)\\s'
        'beginCaptures':
          '1':
            'name': 'keyword.control.assert.java'
        'end': '$'
        'name': 'meta.declaration.assertion.java'
        'patterns': [
          {
            'match': ':'
            'name': 'keyword.operator.assert.expression-separator.java'
          }
          {
            'include': '#code'
          }
        ]
      }
    ]
  'class':
    'begin': '(?=\\w?[\\w\\s]*(?:clase|(?:@)?interfaz|enum|接口|枚举|интерфейс|перечис)\\s+\\w+)'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.class.end.bracket.curly.java'
    'name': 'meta.class.java'
    'patterns': [
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#generics'
      }
      {
        'include': '#comments'
      }
      {
        'captures':
          '1':
            'name': 'storage.modifier.java'
          '2':
            'name': 'entity.name.type.class.java'
        'match': '(class|(?:@)?interface|enum)\\s+(\\w+)'
        'name': 'meta.class.identifier.java'
      }
      {
        'begin': 'extends'
        'beginCaptures':
          '0':
            'name': 'storage.modifier.extends.java'
        'end': '(?={|implements)'
        'name': 'meta.definition.class.inherited.classes.java'
        'patterns': [
          {
            'include': '#object-types-inherited'
          }
          {
            'include': '#comments'
          }
        ]
      }
      {
        'begin': '(implements)\\s'
        'beginCaptures':
          '1':
            'name': 'storage.modifier.implements.java'
        'end': '(?=\\s*extends|\\{)'
        'name': 'meta.definition.class.implemented.interfaces.java'
        'patterns': [
          {
            'include': '#object-types-inherited'
          }
          {
            'include': '#comments'
          }
        ]
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.class.begin.bracket.curly.java'
        'end': '(?=})'
        'contentName': 'meta.class.body.java'
        'patterns': [
          {
            'include': '#class-body'
          }
        ]
      }
    ]
  'class-body':
    'patterns': [
      {
        'include': '#comments-javadoc'
      }
      {
        'include': '#comments'
      }
      {
        'include': '#class'
      }
      {
        'include': '#enums'
      }
      {
        'include': '#generics'
      }
      {
        'include': '#static-initializer'
      }
      {
        'include': '#methods'
      }
      {
        'include': '#annotations'
      }
      {
        'include': '#member-variables'
      }
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#code'
      }
    ]
  'anonymous-block-and-instance-initializer':
    'begin': '{'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.block.begin.bracket.curly.java'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.block.end.bracket.curly.java'
    'patterns': [
      {
        'include': '#code'
      }
    ]
  'static-initializer':
    'patterns': [
      {
        'include': '#anonymous-block-and-instance-initializer'
      }
      {
        'match': 'static'
        'name': 'storage.modifier.java'
      }
    ]
  'code':
    'patterns': [
      {
        'include': '#annotations'
      }
      {
        'include': '#comments'
      }
      {
        'include': '#enums'
      }
      {
        'include': '#class'
      }
      {
        'include': '#anonymous-block-and-instance-initializer'
      }
      {
        'include': '#try-catch-finally'
      }
      {
        'include': '#assertions'
      }
      {
        'include': '#parens'
      }
      {
        'include': '#constants-and-special-vars'
      }
      {
        'include': '#numbers'
      }
      {
        'include': '#anonymous-classes-and-new'
      }
      {
        'include': '#lambda-expression'
      }
      {
        'include': '#keywords'
      }
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#method-call'
      }
      {
        'include': '#function-call'
      }
      {
        'include': '#objects'
      }
      {
        'include': '#properties'
      }
      {
        'include': '#variables'
      }
      {
        'include': '#strings'
      }
      {
        'include': '#all-types'
      }
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
      {
        'match': '\\.'
        'name': 'punctuation.separator.period.java'
      }
      {
        'match': ';'
        'name': 'punctuation.terminator.java'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.java'
        'match': '/\\*\\*/'
        'name': 'comment.block.empty.java'
      }
      {
        'include': 'text.html.javadoc'
      }
      {
        'include': '#comments-inline'
      }
    ]
  'comments-inline':
    'patterns': [
      {
        'begin': '/\\*'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.java'
        'end': '\\*/'
        'name': 'comment.block.java'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.java'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.java'
            'end': '\\n'
            'name': 'comment.line.double-slash.java'
          }
        ]
      }
    ]
  'comments-javadoc':
    'patterns': [
      'begin': '^\\s*/\\*\\*'
      'beginCaptures':
        '0':
          'name': 'punctuation.definition.comment.java'
      'end': '\\*/'
      'endCaptures':
        '0':
          'name': 'punctuation.definition.comment.java'
      'name': 'comment.block.javadoc.java'
      'patterns': [
        {
          'match': '@(author|deprecated|return|see|serial|since|version)\\b'
          'name': 'keyword.other.documentation.javadoc.java'
        }
        {
          'match': '(@param)\\s+(\\S+)'
          'captures':
            '1':
              'name': 'keyword.other.documentation.javadoc.java'
            '2':
              'name': 'variable.parameter.java'
        }
        {
          'match': '(@(?:exception|throws))\\s+(\\S+)'
          'captures':
            '1':
              'name': 'keyword.other.documentation.javadoc.java'
            '2':
              'name': 'entity.name.type.class.java'
        }
        {
          'match': '{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*}'
          'captures':
            '1':
              'name': 'keyword.other.documentation.javadoc.java'
            '2':
              'name': 'entity.name.type.class.java'
            '3':
              'name': 'variable.parameter.java'
        }
      ]
    ]
  'try-catch-finally':
    'patterns': [
      # try block
      {
        'begin': '\\btry\\b'
        'beginCaptures':
          '0':
            'name': 'keyword.control.try.java'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.try.end.bracket.curly.java'
        'name': 'meta.try.java'
        'patterns': [
          {
            'begin': '\\('
            'beginCaptures':
              '0':
                'name': 'punctuation.section.try.resources.begin.bracket.round.java'
            'end': '\\)'
            'endCaptures':
              '0':
                'name': 'punctuation.section.try.resources.end.bracket.round.java'
            'name': 'meta.try.resources.java'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
          {
            'begin': '{'
            'beginCaptures':
              '0':
                'name': 'punctuation.section.try.begin.bracket.curly.java'
            'end': '(?=})'
            'contentName': 'meta.try.body.java'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
        ]
      }
      # catch block (with "parameters")
      {
        'begin': '\\b(catch)\\b\\s*(?=\\(\\s*[^\\s]+\\s*[^)]+\\))'
        'beginCaptures':
          '1':
            'name': 'keyword.control.catch.java'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.catch.end.bracket.curly.java'
        'name': 'meta.catch.java'
        'patterns': [
          {
            'begin': '\\('
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.parameters.begin.bracket.round.java'
            'end': '\\)'
            'endCaptures':
              '0':
                'name': 'punctuation.definition.parameters.end.bracket.round.java'
            'contentName': 'meta.catch.parameters.java'
            'patterns': [
              {
                'include': '#parameters'
              }
            ]
          }
          {
            'begin': '{'
            'beginCaptures':
              '0':
                'name': 'punctuation.section.catch.begin.bracket.curly.java'
            'end': '(?=})'
            'contentName': 'meta.catch.body.java'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
        ]
      }
      # finally block
      {
        'begin': '\\bfinally\\b'
        'beginCaptures':
          '0':
            'name': 'keyword.control.finally.java'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.finally.end.bracket.curly.java'
        'name': 'meta.finally.java'
        'patterns': [
          {
            'begin': '{'
            'beginCaptures':
              '0':
                'name': 'punctuation.section.finally.begin.bracket.curly.java'
            'end': '(?=})'
            'contentName': 'meta.finally.body.java'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
        ]
      }
    ]
  'constants-and-special-vars':
    'patterns': [
      {
        'match': '\\b(true|false|null)\\b'
        'name': 'constant.language.java'
      }
      {
        'match': '\\bthis\\b'
        'name': 'variable.language.this.java'
      }
      {
        'match': '\\bsuper\\b'
        'name': 'variable.language.java'
      }
    ]
  'generics':
    'begin': '<'
    'beginCaptures':
      '0':
        'name': 'punctuation.bracket.angle.java'
    'end': '>'
    'endCaptures':
      '0':
        'name': 'punctuation.bracket.angle.java'
    'patterns': [
      {
        'match': '\\b(extends|super)\\b'
        'name': 'storage.modifier.$1.java'
      }
      {
        'match': '([a-zA-Z$_][a-zA-Z0-9$_]*)(?=\\s*<)'
        'captures':
          '1':
            'name': 'storage.type.java'
      }
      {
        'match': '[a-zA-Z$_][a-zA-Z0-9$_]*'
        'name': 'storage.type.generic.java'
      }
      {
        'match': '\\?'
        'name': 'storage.type.generic.wildcard.java'
      }
      {
        'match': '&'
        'name': 'punctuation.separator.types.java'
      }
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
      {
        'include': '#parens'
      }
      {
        'include': '#generics'
      }
      {
        'include': '#comments'
      }
    ]
  'enums':
    'begin': '^\\s*(enum)\\s+(\\w+)'
    'beginCaptures':
      '1':
        'name': 'storage.modifier.java'
      '2':
        'name': 'entity.name.type.enum.java'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.enum.end.bracket.curly.java'
    'name': 'meta.enum.java'
    'patterns': [
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.enum.begin.bracket.curly.java'
        'end': '(?=})'
        'patterns': [
          {
            'match': '\\w+'
            'name': 'constant.other.enum.java'
          }
          {
            'include': '#class-body'
          }
        ]
      }
      {
        'include': '#comments'
      }
    ]
  'function-call':
    'begin': '([A-Za-z_$][\\w$]*)\\s*(\\()'
    'beginCaptures':
      '1':
        'name': 'entity.name.function.java'
      '2':
        'name': 'punctuation.definition.parameters.begin.bracket.round.java'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.parameters.end.bracket.round.java'
    'name': 'meta.function-call.java'
    'patterns': [
      {
        'include': '#code'
      }
    ]
  'keywords':
    'patterns': [
      {
        'match': '\\bthrow\\b'
        'name': 'keyword.control.throw.java'
      }
      {
        'match': '\\?|:'
        'name': 'keyword.control.ternary.java'
      }
      {
        'match': '\\b(devolver|inter|caso|continua|predet|haz|mientras|para|cambia|si|entonces|
        вернуть|прорыв|вариант|продолж|умолч|делай|пока|для|ключ|если|иначе|
        返回|打破|案例|继续|双|做|同时|对于|开关|如果|否则|
        return|break|case|continue|default|do|while|for|switch|if|else
        )\\b'
        'name': 'keyword.control.java'
      }
      {
        'match': '\\b(instanceof)\\b'
        'name': 'keyword.operator.instanceof.java'
      }
      {
        'match': '(<<|>>>?|~|\\^)'
        'name': 'keyword.operator.bitwise.java'
      }
      {
        'match': '((&|\\^|\\||<<|>>>?)=)'
        'name': 'keyword.operator.assignment.bitwise.java'
      }
      {
        'match': '(===?|!=|<=|>=|<>|<|>)'
        'name': 'keyword.operator.comparison.java'
      }
      {
        'match': '([+*/%-]=)'
        'name': 'keyword.operator.assignment.arithmetic.java'
      }
      {
        'match': '(=)'
        'name': 'keyword.operator.assignment.java'
      }
      {
        'match': '(\\-\\-|\\+\\+)'
        'name': 'keyword.operator.increment-decrement.java'
      }
      {
        'match': '(\\-|\\+|\\*|\\/|%)'
        'name': 'keyword.operator.arithmetic.java'
      }
      {
        'match': '(!|&&|\\|\\|)'
        'name': 'keyword.operator.logical.java'
      }
      {
        'match': '(\\||&)'
        'name': 'keyword.operator.bitwise.java'
      }
    ]
  'lambda-expression':
    'patterns': [
      {
        'match': '->'
        'name': 'storage.type.function.arrow.java'
      }
    ]
  'method-call':
    'begin': '(\\.)\\s*([A-Za-z_$][\\w$]*)\\s*(\\()'
    'beginCaptures':
      '1':
        'name': 'punctuation.separator.period.java'
      '2':
        'name': 'entity.name.function.java'
      '3':
        'name': 'punctuation.definition.parameters.begin.bracket.round.java'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.parameters.end.bracket.round.java'
    'name': 'meta.method-call.java'
    'patterns': [
      {
        'include': '#code'
      }
    ]
  'methods':
    'begin': '(?!nuevo)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()'
    'end': '(})|(?=;)'
    'endCaptures':
      '1':
        'name': 'punctuation.section.method.end.bracket.curly.java'
    'name': 'meta.method.java'
    'patterns': [
      {
        'include': '#storage-modifiers'
      }
      {
        'begin': '(\\w+)\\s*(\\()'
        'beginCaptures':
          '1':
            'name': 'entity.name.function.java'
          '2':
            'name': 'punctuation.definition.parameters.begin.bracket.round.java'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.parameters.end.bracket.round.java'
        'name': 'meta.method.identifier.java'
        'patterns': [
          {
            'include': '#parameters'
          }
          {
            'include': '#parens'
          }
          {
            'include': '#comments-inline'
          }
        ]
      }
      {
        'include': '#generics'
      }
      {
        'begin': '(?=\\w.*\\s+\\w+\\s*\\()'
        'end': '(?=\\s+\\w+\\s*\\()'
        'name': 'meta.method.return-type.java'
        'patterns': [
          {
            'include': '#all-types'
          }
          {
            'include': '#parens'
          }
        ]
      }
      {
        'include': '#throws'
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.method.begin.bracket.curly.java'
        'end': '(?=})'
        'contentName': 'meta.method.body.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'include': '#comments'
      }
    ]
  'numbers':
    # See http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.1 (integers)
    # and http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.2 (floats)
    # for the official specifications
    'patterns': [
      {
        'match': '''(?x)
          \\b(?<!\\$)
          0(x|X)
          (
            (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)
            |
            (
              [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?
              |
              ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?
            )
            [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?
          )
          \\b(?!\\$)
        '''
        'name': 'constant.numeric.hex.java'
      }
      {
        'match': '\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)'
        'name': 'constant.numeric.binary.java'
      }
      {
        'match': '\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)'
        'name': 'constant.numeric.octal.java'
      }
      {
        'match': '''(?x)
          (?<!\\$)
          (
            \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)
            |
            \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b
            |
            \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b
            |
            \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b
            |
            (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b
            |
            \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b
            |
            \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b
            |
            \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b
          )
          (?!\\$)
        '''
        'name': 'constant.numeric.decimal.java'
      }
    ]
  'object-types':
    'patterns': [
      {
        'include': '#generics'
      }
      {
        'begin': '\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*([A-Z]\\w*)\\s*(?=\\[)'
        'beginCaptures':
          '1':
            'name': 'punctuation.separator.period.java'
          '2':
            'name': 'storage.type.object.array.java'
        'end': '(?!\\s*\\[)'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#parens'
          }
        ]
      }
      {
        # Match possible generics first, eg Wow<String> instead of just Wow
        'begin': '\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\s*(?=<)'
        'beginCaptures':
          '0':
            'name': 'storage.type.java'
          '1':
            'name': 'punctuation.separator.period.java'
        'end': '(?<=>)'
        'patterns': [
          {
            'include': '#generics'
          }
        ]
      }
      {
        # If the above fails *then* just look for Wow
        'match': '\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\b'
        'name': 'storage.type.java'
        'captures':
          '1':
            'name': 'punctuation.separator.period.java'
      }
    ]
  'object-types-inherited':
    'patterns': [
      {
        'include': '#generics'
      }
      {
        'match': '\\b(?:[A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*\\b'
        'name': 'entity.other.inherited-class.java'
        'captures':
          '1':
            'name': 'punctuation.separator.period.java'
      }
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
    ]
  'objects':
    # obj in obj.prop, obj.methodCall()
    'match': '(?<![\\w$])[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[\\w$]+)'
    'name': 'variable.other.object.java'
  'parameters':
    'patterns': [
      {
        'match': '\\bfinal\\b'
        'name': 'storage.modifier.java'
      }
      {
        'include': '#annotations'
      }
      {
        'include': '#all-types'
      }
      {
        'include': '#strings'
      }
      {
        'match': '\\w+'
        'name': 'variable.parameter.java'
      }
      {
        'match': ','
        'name': 'punctuation.separator.delimiter.java'
      }
    ]
  'parens':
    'patterns': [
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.bracket.round.java'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.bracket.round.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'begin': '\\['
        'beginCaptures':
          '0':
            'name': 'punctuation.bracket.square.java'
        'end': '\\]'
        'endCaptures':
          '0':
            'name': 'punctuation.bracket.square.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.bracket.curly.java'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.bracket.curly.java'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
    ]
  'primitive-arrays':
    'patterns': [
      {
        'begin': '\\b(vacio|booleano|byte|cara|corto|ent|floata|largo|doble|
        пустой|логический|байт|знак|короткий|целый|плавающей|длинные|двойной|
        无效|布尔|字节|焦炭|短|整数|浮|长|双|
        void|boolean|byte|char|short|int|float|long|double
        )\\b\\s*(?=\\[)'
        'beginCaptures':
          '1':
            'name': 'storage.type.primitive.array.java'
        'end': '(?!\\s*\\[)'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#parens'
          }
        ]
      }
    ]
  'primitive-types':
    'match': '\\b(vacio|booleano|byte|cara|corto|ent|flota|largo|doble|
    пустой|логический|байт|знак|короткий|целый|плавающей|длинные|двойной|
    无效|布尔|字节|焦炭|短|整数|浮|长|双|
    void|boolean|byte|char|short|int|float|long|double)\\b'
    'name': 'storage.type.primitive.java'
  'properties':
    'patterns': [
      {
        # prop1 in obj.prop1.prop2, func().prop1.prop2
        'match': '(\\.)\\s*([a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$][\\w$]*)'
        'captures':
          '1':
            'name': 'punctuation.separator.period.java'
          '2':
            'name': 'variable.other.object.property.java'
      }
      {
        # prop in obj.prop, func().prop
        'match': '(\\.)\\s*([a-zA-Z_$][\\w$]*)'
        'captures':
          '1':
            'name': 'punctuation.separator.period.java'
          '2':
            'name': 'variable.other.property.java'
      }
      {
        # 123illegal in obj.123illegal, func().123illegal
        'match': '(\\.)\\s*([0-9][\\w$]*)'
        'captures':
          '1':
            'name': 'punctuation.separator.period.java'
          '2':
            'name': 'invalid.illegal.identifier.java'
      }
    ]
  'storage-modifiers':
    'match': '\\b(publico|privado|protegido|estatico|final|native|sincronizado|abstracto|threadsafe|transitorio|volatil|predet|estrictopf|
    публичный|частный|защищенный|статический|резерв|нативный|синхронный|абстракт|threadsafe|транзитный|волатилная|умолч|точныйПЗ|
    公共|私人|保护|静态|最终|本地|同步|抽象|threadsafe|瞬时|挥发性|默认|严格浮点|
    public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient|volatile|default|strictfp)\\b'
    'name': 'storage.modifier.java'
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.java'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.java'
        'name': 'string.quoted.double.java'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.java'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.java'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.java'
        'name': 'string.quoted.single.java'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.java'
          }
        ]
      }
    ]
  'throws':
    'begin': 'throws'
    'beginCaptures':
      '0':
        'name': 'storage.modifier.java'
    'end': '(?={|;)'
    'name': 'meta.throwables.java'
    'patterns': [
      {
        'include': '#object-types'
      }
    ]
  'variables':
    'begin': '''(?x)
      (?=
        (
          (vacio|booleano|byte|cara|corto|ent|floata|largo|doble|
          пустой|логический|байт|знак|короткий|целый|плавающей|длинные|двойной|
          无效|布尔|字节|焦炭|短|整数|浮|长|双|
          void|boolean|byte|char|short|int|float|long|double)
          |
          (?>(\\w+\\.)*[A-Z]+\\w*) # e.g. `javax.ws.rs.Response`, or `String`
        )
        (
          <[\\w<>,?\\s]*> # HashMap<Integer, String>
        )?
        (
          (\\[\\])* # ent[][]
        )?
        \\s+
        [A-Za-z_$][\\w$]* # At least one identifier after space
        ([\\w\\[\\],$][\\w\\[\\],\\s]*)? # possibly primitive array or additional identifiers
        \\s*(=|;)
      )
    '''
    'end': '(?=;)'
    'name': 'meta.definition.variable.java'
    'patterns': [
      {
        'match': '([A-Za-z$_][\\w$]*)(?=\\s*(\\[\\])*\\s*(;|=|,))'
        'captures':
          '1':
            'name': 'variable.other.definition.java'
      }
      {
        'include': '#all-types'
      }
      {
        'begin': '='
        'beginCaptures':
          '0':
            'name': 'keyword.operator.assignment.java'
        'end': '(?=;)'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'include': '#code'
      }
    ]
  'member-variables':
    'begin': '(?=privado|protegido|publico|native|sincronizado|abstracto|threadsafe|transitorio|estatico|final|
    частный|защищенный|публичный|нативный|синхронный|абстракт|threadsafe|транзитный|статический|резерв|
    私人|保护|公共|本地|同步|抽象|threadsafe|瞬时|静态|最终|
    private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final)'
    'end': '(?=;)'
    'patterns': [
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#variables'
      }
    ]
